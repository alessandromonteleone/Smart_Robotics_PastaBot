<?xml version="1.0"?>

<launch>
    <!-- Base arguments (meters), allow to move the robot's base inside the Gazebo world -->
    <arg name="arg_x" default="-1.00" />
    <arg name="arg_y" default="0.00" />
    <arg name="arg_z" default="1" />
    <arg name="arg_R" default="0.00" />
    <arg name="arg_P" default="0.00" />
    <arg name="arg_Y" default="0.00" />    
    
    <!-- Load Gofa's URDF model into the parameter server -->
    <param name="robot_description" textfile="$(find pastabot_pkg)/urdf/gofa_arm_urdf_toolfixed.urdf"/>
        
    <!-- Start Gazebo with an empty world -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find pastabot_pkg)/worlds/pasta.world"/>
        <arg name="paused" value="true"/>
    </include>

    <node name="tf_footprint_base" pkg="tf" type="static_transform_publisher"
    args="0 0 0 0 0 0 base_link base_footprint 40" />

    <!-- Spawn a gofa in Gazebo, taking the description from the parm server -->
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model"
    args="-x $(arg arg_x) -y $(arg arg_y) -z $(arg arg_z) -Y $(arg arg_Y) 
    -param robot_description -urdf -model gofa_arm_urdf_toolfixed -J jnt1_rev 0.0
    -J jnt2_rev 2.0 -J jnt3_rev 0.0 -J jnt4_rev 0.0 -J jnt5_rev 0.0 -J jnt6_rev 0.0" />

    <!--Load and launch the joint trajectory controller-->
    <rosparam file ="$(find pastabot_pkg)/config/joint_trajectory_controller.yaml" command="load"/> <!-- file nella cartella confing per comiunicare gli spostamenti fatti -->
    <node name= "controller_spawner" pkg= "controller_manager"
    type="spawner" respawn="false" output="screen"
    args="joint_state_controller gofa_arm_controller"/> <!-- inizializzo i controller da comandare che si strovano nel file joint_trajectpry... -->

    <rosparam file="$(find pastabot_pkg)/config/gofa_arm_controller.yaml" command="load"/>
    <node name="controller_spawner_2" pkg="controller_manager" type="spawner"
    args="gofa_arm_controller"/>

    <!-- Robot State Publisher for TF of each joint: publishes all the current states of the joint, then RViz can visualize -->
    <node name="robot_state_publisher" pkg="robot_state_publisher"
    type="robot_state_publisher" respawn="false" output="screen"/>

    <!-- Image Saver Node 
    <node name="image_saver" pkg="pastabot_pkg" type="image_saver.py" output="screen"/>-->

    <!-- Image Saver Node -->
    <node name="object_detection" pkg="pastabot_pkg" type="object_detection.py" output="screen"/>

</launch>
